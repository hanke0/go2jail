jails:
  # NFTables Jail - Blocks IPs using Linux nftables sets
  # Requires nftables installed and proper permissions
  - id: nft
    type: nftset
    #sudo: false         # Run nft commands without sudo (requires CAP_NET_ADMIN)
    #nft_executable: nft # Custom path to nft binary if not in $PATH
    rule: inet # NFTables rule family (inet/ip6/arp/etc)
    table: filter # NFTables table name to modify
    ipv4_set: ipv4_block_set # IPv4 set name (must exist in nftables config)
    ipv6_set: ipv6_block_set # IPv6 set name (must exist in nftables config)
    #background: false # run jail in the background if set true

  # Echo Jail - Debugging tool that prints blocked IPs to stdout
  # Does NOT perform actual blocking - use for testing/config validation
  - id: echo
    type: echo
    #background: false # run jail in the background

  # Log Jail - Logs the blocked IP.
  - id: log
    type: log
    #background: false # run jail in the background if set true

  # Shell Jail - Execute custom scripts for advanced blocking scenarios
  - id: shell
    type: shell
    #shell: bash         # Shell interpreter (default: bash or sh)
    #shell_options: ['-e'] # Shell execution options (default: -e for error checking)
    #timeout: 60s    # Maximum execution time (units: s=seconds, m=minutes)
    #run_user: root  # User to run the script as (default: current user) process start with root user.
    #run_group: root # Group to run the script as (default: current group). process start with root user.
    shell_output: /dev/null # Redirect shell output to this file.

    # Script accepts 2 parameters: IP($1) and match line($2).
    # All discipline match groups are passed as environment variables prefixed with "GO2JAIL_"
    run: |
      ip="$1"  # Blocked IP passed as first parameter
      echo "Blocking IP: $ip"  # Example command - replace with actual blocking logic
      echo "Matched group user: $GO2JAIL_user"
    
    #background: false # run jail in the background if set true

  # HTTP Jail - Blocks IPs using HTTP requests.
  # url,args,headers,and body value can contain ${var} placeholders,
  # where var is a valid name of discipline matched group.
  - id: http
    type: http
    url: https://example.com
    method: POST
    args:
      - key: user
        value: '${user}'
      - key: ip
        value: '${ip}'
      - key: alert
        value: 'true'
    body: '${ip} ${user}'
    headers:
      - key: X-GO2JAIL
        value: '${user}'
    #background: false # run jail in the background

  # Mail Jail - Blocks IPs by sending mail by SMTP.
  # subject and body value can contain ${var} placeholders,
  # where var is a valid name of discipline matched group.
  # Mail body is present in HTML format.
  - id: mail
    type: mail
    host: smtp-mail.outlook.com:587
    encryption: tls # tls or starttls
    username: foo@example.com
    password: bar
    #password_file: ~/.mailpass
    from: foo <foo@example.com>
    to: bar <bar@example.com>
    subject: 'Security Alert'
    body: 'Security Alert: IP ${ip} has been blocked by go2jail.'
    #background: false # run jail in the background if set true

# IP Allow List for all disciplines - Bypass blocking for trusted IPs/CIDRs
# Format: IPv4/IPv6 addresses with optional CIDR notation (e.g., 192.168.1.0/24)
allows:
  - 192.168.1.0/24 # Example: Allow specific IPv4
  - fd00::/8 # Example: Allow IPv6 network

watches:
  - id: log
    # file type watch file changes, and handle line by line.
    type: file
    files:
      - /var/log/auth.log # System authentication log file path
    skip_when_file_not_exists: false # do not present an error when file not exits.
  - id: shell
    type: shell
    #shell: bash         # Shell interpreter (default: bash or sh)
    #shell_options: ['-e'] # Shell execution options (default: -e for error checking)
    #run_user: root      # User to run the script as (default: current user)
    #run_group: root # Group to run the script as (default: current group)
    restart_policy: on-success # always,on-success,once.
    run: |
      tail -F /var/log/auth.log

# Security Discipline Configuration
# Define attack patterns and response rules for monitored services
disciplines:
  - id: sshd # Unique identifier for this security rule set
    type: regex # regex match line.
    # Watches to activate for blocking
    watches: ['log']
    # Jails to activate for blocking
    jails: ['nft', 'echo', 'shell']
    # Rate limit: 5 events per 10 minutes triggers blocking.
    # Format: <count>/[interval]<unit>
    # Support Units: ms=milliseconds, s=seconds, m=minutes, h=hours, d=days
    # If interval is omitted, default to 1.
    # Examples:
    #   10/100ms (10 events per 100 milliseconds)
    #   1/s (1 event per second)
    #   10/5s (10 events per 5 seconds)
    #   10/m (10 events per 1 minutes)
    #   5/10m (5 events per 10 minutes)
    #   5/h (5 events per 1 hour)
    #   5/d (5 events per 1 day)
    rate: 5/10m

    # Attack detection patterns (https://pkg.go.dev/regexp/syntax)
    # Must contain exactly one named capture group 'ip'.
    # All named capture groups are passed to jails.
    # Pattern notes:
    # %(ip) is predefined regex that match a named group 'ip' both IPv4 and IPv6,
    # %(ip) will be replaced with real regex before pattern compile.
    matches:
      # Detect SSH authentication failures with remote IP
      - authentication\s+failure.+?rhost=%(ip)

    # Ignore patterns - exclude matches from blocking
    ignores:
      - rhost=127\.0\.0\.1 # Ignore localhost connections

    # allows ip for this discipline
    allows:
      - 192.168.1.0/24
